/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  FulfillmentApplier,
  FulfillmentApplierInterface,
} from "../../../../seaport/contracts/lib/FulfillmentApplier";

const _abi = [
  {
    inputs: [],
    name: "InvalidFulfillmentComponentData",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fulfillmentIndex",
        type: "uint256",
      },
    ],
    name: "MismatchedFulfillmentOfferAndConsiderationComponents",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum Side",
        name: "side",
        type: "uint8",
      },
    ],
    name: "MissingFulfillmentComponentOnAggregation",
    type: "error",
  },
  {
    inputs: [],
    name: "OfferAndConsiderationRequiredOnFulfillment",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea2646970667358221220758e91e68794be35de18f7d546dd61faccd23485f72c160f8cac6116fd3fa14864736f6c63430008110033";

type FulfillmentApplierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FulfillmentApplierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FulfillmentApplier__factory extends ContractFactory {
  constructor(...args: FulfillmentApplierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FulfillmentApplier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FulfillmentApplier__factory {
    return super.connect(runner) as FulfillmentApplier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FulfillmentApplierInterface {
    return new Interface(_abi) as FulfillmentApplierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FulfillmentApplier {
    return new Contract(address, _abi, runner) as unknown as FulfillmentApplier;
  }
}
