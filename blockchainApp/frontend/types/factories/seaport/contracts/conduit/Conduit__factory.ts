/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Conduit,
  ConduitInterface,
} from "../../../../seaport/contracts/conduit/Conduit";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BadReturnValueFromERC20OnTransfer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "channel",
        type: "address",
      },
    ],
    name: "ChannelClosed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "channel",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isOpen",
        type: "bool",
      },
    ],
    name: "ChannelStatusAlreadySet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "identifiers",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "ERC1155BatchTransferGenericFailure",
    type: "error",
  },
  {
    inputs: [],
    name: "Invalid1155BatchTransferEncoding",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidController",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InvalidERC721TransferAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidItemType",
    type: "error",
  },
  {
    inputs: [],
    name: "MissingItemAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "NoContract",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "identifier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenTransferGenericFailure",
    type: "error",
  },
  {
    inputs: [],
    name: "UnusedItemParameters",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "channel",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "open",
        type: "bool",
      },
    ],
    name: "ChannelUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum ConduitItemType",
            name: "itemType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "identifier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ConduitTransfer[]",
        name: "transfers",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "ids",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
        ],
        internalType: "struct ConduitBatch1155Transfer[]",
        name: "batchTransfers",
        type: "tuple[]",
      },
    ],
    name: "executeBatch1155",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum ConduitItemType",
            name: "itemType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "identifier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ConduitTransfer[]",
        name: "standardTransfers",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "ids",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
        ],
        internalType: "struct ConduitBatch1155Transfer[]",
        name: "batchTransfers",
        type: "tuple[]",
      },
    ],
    name: "executeWithBatch1155",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "channel",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isOpen",
        type: "bool",
      },
    ],
    name: "updateChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050608051610fad61006060003960006102900152610fad6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634ce34aa214610051578063899e104c146100815780638df25d92146100b1578063c4e8fcb5146100e1575b600080fd5b61006b60048036038101906100669190610b67565b6100fd565b6040516100789190610bef565b60405180910390f35b61009b60048036038101906100969190610c60565b610191565b6040516100a89190610bef565b60405180910390f35b6100cb60048036038101906100c69190610ce1565b610231565b6040516100d89190610bef565b60405180910390f35b6100fb60048036038101906100f69190610dc4565b61028e565b005b6000336000526000602052604060002054610140577f93daadf2000000000000000000000000000000000000000000000000000000006000523360045260246000fd5b600083839050905060005b8181101561017f5761017485858381811061016957610168610e04565b5b905060c00201610450565b80600101905061014b565b50634ce34aa260e01b91505092915050565b60003360005260006020526040600020546101d4577f93daadf2000000000000000000000000000000000000000000000000000000006000523360045260246000fd5b600085859050905060005b81811015610213576102088787838181106101fd576101fc610e04565b5b905060c00201610450565b8060010190506101df565b5061021e8484610673565b63899e104c60e01b915050949350505050565b6000336000526000602052604060002054610274577f93daadf2000000000000000000000000000000000000000000000000000000006000523360045260246000fd5b61027e8383610673565b638df25d9260e01b905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610313576040517f6d5769be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036103a85781816040517f924e341e00000000000000000000000000000000000000000000000000000000815260040161039f929190610e51565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fae63067d43ac07563b7eb8db6595635fc77f1578a2a5ea06ba91b63e2afa37e2826040516104449190610e7a565b60405180910390a25050565b6001600381111561046457610463610e95565b5b8160000160208101906104779190610ee9565b600381111561048957610488610e95565b5b036104d9576104d48160200160208101906104a49190610f16565b8260400160208101906104b79190610f16565b8360600160208101906104ca9190610f16565b8460a001356107fe565b610670565b600260038111156104ed576104ec610e95565b5b8160000160208101906105009190610ee9565b600381111561051257610511610e95565b5b036105af5760018160a0013514610564578060a001356040517f69f9582700000000000000000000000000000000000000000000000000000000815260040161055b9190610f5c565b60405180910390fd5b6105aa81602001602081019061057a9190610f16565b82604001602081019061058d9190610f16565b8360600160208101906105a09190610f16565b846080013561091c565b61066f565b6003808111156105c2576105c1610e95565b5b8160000160208101906105d59190610ee9565b60038111156105e7576105e6610e95565b5b0361063c576106378160200160208101906106029190610f16565b8260400160208101906106159190610f16565b8360600160208101906106289190610f16565b84608001358560a001356109f7565b61066e565b6040517f7932f1fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b50565b8082807f2eb2c2d60000000000000000000000000000000000000000000000000000000060205260005b838110156107f157823582018035803b6106c357635f15d672600052806020526024601cfd5b60a08201358060051b60c0018060808501351460a06060860135141681850135831416158015610717577feba2084c0000000000000000000000000000000000000000000000000000000060005260046000fd5b6020880197506080602086016024378260061b6040018060a00160a45260008160c401528060c4018160a0880160c43760008082602060008a5af1806107de573d156107a357601f3d0160051c8260051c816003028183111561078a578182028384020360091c60038385030201810190505b5a60208201101561079f573d6000803e3d6000fd5b5050505b7fafc445e2000000000000000000000000000000000000000000000000000000006000528660045260c0606452608451602001608452816000fd5b505050505050505060018101905061069d565b5060806040525050505050565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000600052836004528260245281604452602060006064600080895af1803d15601f3d116001600051141617163d1515811661090a5780873b15151661090957806108f757816108d9573d156108b657601f3d0160051c8360051c816003028183111561089d578182028384020360091c60038385030201810190505b5a6020820110156108b2573d6000803e3d6000fd5b5050505b63f486bc8760005286602052856040528460605260006080528360a05260a4601cfd5b6398891923600052866020528560405284606052836080526084601cfd5b635f15d672600052866020526024601cfd5b5b82604052600060605250505050505050565b833b61093457635f15d672600052836020526024601cfd5b6040517f23b872dd000000000000000000000000000000000000000000000000000000006000528360045282602452816044526000806064600080895af1806109e6573d156109c357601f3d0160051c8260051c81600302818311156109aa578182028384020360091c60038385030201810190505b5a6020820110156109bf573d6000803e3d6000fd5b5050505b63f486bc8760005285602052846040528360605282608052600160a05260a4601cfd5b816040526000606052505050505050565b843b610a0f57635f15d672600052846020526024601cfd5b60405160805160a05160c0517ff242432a000000000000000000000000000000000000000000000000000000006000528760045286602452856044528460645260a0608452600060a45260008060c46000808d5af180610ad7573d15610ab557601f3d0160051c8560051c8160030281831115610a9c578182028384020360091c60038385030201810190505b5a602082011015610ab1573d6000803e3d6000fd5b5050505b63f486bc87600052896020528860405287606052866080528560a05260a4601cfd5b836080528260a0528160c05284604052600060605250505050505050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610b2757610b26610b02565b5b8235905067ffffffffffffffff811115610b4457610b43610b07565b5b6020830191508360c0820283011115610b6057610b5f610b0c565b5b9250929050565b60008060208385031215610b7e57610b7d610af8565b5b600083013567ffffffffffffffff811115610b9c57610b9b610afd565b5b610ba885828601610b11565b92509250509250929050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610be981610bb4565b82525050565b6000602082019050610c046000830184610be0565b92915050565b60008083601f840112610c2057610c1f610b02565b5b8235905067ffffffffffffffff811115610c3d57610c3c610b07565b5b602083019150836020820283011115610c5957610c58610b0c565b5b9250929050565b60008060008060408587031215610c7a57610c79610af8565b5b600085013567ffffffffffffffff811115610c9857610c97610afd565b5b610ca487828801610b11565b9450945050602085013567ffffffffffffffff811115610cc757610cc6610afd565b5b610cd387828801610c0a565b925092505092959194509250565b60008060208385031215610cf857610cf7610af8565b5b600083013567ffffffffffffffff811115610d1657610d15610afd565b5b610d2285828601610c0a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d5982610d2e565b9050919050565b610d6981610d4e565b8114610d7457600080fd5b50565b600081359050610d8681610d60565b92915050565b60008115159050919050565b610da181610d8c565b8114610dac57600080fd5b50565b600081359050610dbe81610d98565b92915050565b60008060408385031215610ddb57610dda610af8565b5b6000610de985828601610d77565b9250506020610dfa85828601610daf565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610e3c81610d4e565b82525050565b610e4b81610d8c565b82525050565b6000604082019050610e666000830185610e33565b610e736020830184610e42565b9392505050565b6000602082019050610e8f6000830184610e42565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610ed157600080fd5b50565b600081359050610ee381610ec4565b92915050565b600060208284031215610eff57610efe610af8565b5b6000610f0d84828501610ed4565b91505092915050565b600060208284031215610f2c57610f2b610af8565b5b6000610f3a84828501610d77565b91505092915050565b6000819050919050565b610f5681610f43565b82525050565b6000602082019050610f716000830184610f4d565b9291505056fea2646970667358221220b68c8132ae0613b9e13e20a473314d9de5c8e5d2d1e2eda1f4e861318aae979564736f6c63430008130033";

type ConduitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConduitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Conduit__factory extends ContractFactory {
  constructor(...args: ConduitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Conduit & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Conduit__factory {
    return super.connect(runner) as Conduit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConduitInterface {
    return new Interface(_abi) as ConduitInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Conduit {
    return new Contract(address, _abi, runner) as unknown as Conduit;
  }
}
