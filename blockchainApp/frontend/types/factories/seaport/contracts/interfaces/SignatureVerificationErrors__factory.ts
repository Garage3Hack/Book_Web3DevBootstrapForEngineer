/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  SignatureVerificationErrors,
  SignatureVerificationErrorsInterface,
} from "../../../../seaport/contracts/interfaces/SignatureVerificationErrors";

const _abi = [
  {
    inputs: [],
    name: "BadContractSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "BadSignatureV",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSigner",
    type: "error",
  },
] as const;

export class SignatureVerificationErrors__factory {
  static readonly abi = _abi;
  static createInterface(): SignatureVerificationErrorsInterface {
    return new Interface(_abi) as SignatureVerificationErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SignatureVerificationErrors {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SignatureVerificationErrors;
  }
}
