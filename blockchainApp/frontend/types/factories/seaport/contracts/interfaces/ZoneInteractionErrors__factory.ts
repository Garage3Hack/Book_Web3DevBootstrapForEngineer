/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ZoneInteractionErrors,
  ZoneInteractionErrorsInterface,
} from "../../../../seaport/contracts/interfaces/ZoneInteractionErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidContractOrder",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidRestrictedOrder",
    type: "error",
  },
] as const;

export class ZoneInteractionErrors__factory {
  static readonly abi = _abi;
  static createInterface(): ZoneInteractionErrorsInterface {
    return new Interface(_abi) as ZoneInteractionErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ZoneInteractionErrors {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ZoneInteractionErrors;
  }
}
